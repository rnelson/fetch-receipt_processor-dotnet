POST http://localhost:5284/receipts/process
Content-Type: application/json

{
  "retailer": "Target",
  "purchaseDate": "2022-01-01",
  "purchaseTime": "13:01",
  "items": [
    {
      "shortDescription": "Mountain Dew 12PK",
      "price": "6.49"
    },{
      "shortDescription": "Emils Cheese Pizza",
      "price": "12.25"
    },{
      "shortDescription": "Knorr Creamy Chicken",
      "price": "1.26"
    },{
      "shortDescription": "Doritos Nacho Cheese",
      "price": "3.35"
    },{
      "shortDescription": "   Klarbrunn 12-PK 12 FL OZ  ",
      "price": "12.00"
    }
  ],
  "total": "35.35"
}

> {% client.global.set("added_guid_getpoints", response.body.id); %}

###

GET http://localhost:5284/receipts/{{added_guid_getpoints}}/points
Accept: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function() {
        let type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
    
    client.test("Correct points returned", function() {
        let points = response.body.points;
        client.assert(28 == points, "Expected 28 points but received '" + points + "'");
    });
%}

###

POST http://localhost:5284/receipts/process
Content-Type: application/json

{
  "retailer": "M&M Corner Market",
  "purchaseDate": "2022-03-20",
  "purchaseTime": "14:33",
  "items": [
    {
      "shortDescription": "Gatorade",
      "price": "2.25"
    },{
      "shortDescription": "Gatorade",
      "price": "2.25"
    },{
      "shortDescription": "Gatorade",
      "price": "2.25"
    },{
      "shortDescription": "Gatorade",
      "price": "2.25"
    }
  ],
  "total": "9.00"
}

> {% client.global.set("added_guid_getpoints", response.body.id); %}

###

GET http://localhost:5284/receipts/{{added_guid_getpoints}}/points
Accept: application/json

> {%
    client.test("Request executed successfully", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function() {
        let type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test("Correct points returned", function() {
        let points = response.body.points;
        client.assert(109 == points, "Expected 109 points but received '" + points + "'");
    });
%}